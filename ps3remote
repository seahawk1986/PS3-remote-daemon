#!/usr/bin/python
# vim: set fileencoding=utf-8
#
# Alexander Grothe May 2012
# seahawk1986@hotmail.com
#
# a heavily modified version of:
#
# Beagleboard user button
# Copyright 2009 mechomaniac.com
# http://mechomaniac.com/BeagleboardUserButton

import struct
import os
import fcntl
import datetime
import gobject
import socket
import uinput
from optparse import OptionParser

# check if this works on 32-bit systems...
'''if os.uname()[4] == "i686":
    inputEventFormat = 'iihhi'
    inputEventSize = 16''' 
##########################################
if os.uname()[4] == "x86_64":
    inputEventFormat = 'llHHi'
    inputEventSize = 24
else:
    sys.exit(1)
    
events = []

for element in dir(uinput):
    if element.startswith("KEY_") or element.startswith("BTN_") or element.startswith("REL_"):
        events.append(eval("uinput.%s"%(element)))

class devinput():

    def __init__(self):
        self.timer = None
        parser = Options()
        self.options = parser.get_opts()
        self.uinputdev = uinput.Device(events, self.options.name)
                
    def eventhandler(self,sock, *args):
        event = socketpath.read(inputEventSize)
        (time1, time2, typeev, code, value) = struct.unpack(inputEventFormat, event)
        if typeev == 0 and code == 0 and value == 0: # sync event
            pass
        elif value == 0:
            #print "Release %s"%(datetime.datetime.fromtimestamp(time1)+datetime.timedelta(microseconds=time2))
            #print "Type:",typeev,"\tCode: " ,code,"\tValue:", value
            gobject.source_remove(self.timer)
            self.uinputdev.emit((typeev,code), value)
        else:
            #print "Tastendruck %s"%(datetime.datetime.fromtimestamp(time1)+datetime.timedelta(microseconds=time2))
            #print "Type:",typeev,"\tCode: " ,code,"\tValue:", value
            #print code
            self.uinputdev.emit((typeev,code), value)
            if typeev == 1:
                self.timer = gobject.timeout_add(self.options.repeat, self.repeatkey, code)
        return True
        
    def repeatkey(self, code):
        self.uinputdev.emit((1,code), 2)
        return True
        
class Options:
    def __init__(self):
        self.parser = OptionParser()
        self.parser.add_option("-s", "--socket", dest="socket", default=None,
                  help="choose devinput socket to listen on", metavar="SOCKET")
        self.parser.add_option("-r", "--repeat", dest="repeat", default=150, type="int",
                  help="wait -r <milliseconds> before sending repeated keystrokes", metavar="REPEAT")
        self.parser.add_option("-n", "--name", dest="name", default="Bluetooth Remote",
                  help="name of uinput device", metavar="NAME")
             
    def get_opts(self):
        (options, args) = self.parser.parse_args()
        return options
        
        
if __name__ == '__main__':
    devinput2lircd = devinput()
    with open(devinput2lircd.options.socket, "rwb") as socketpath:
        gobject.io_add_watch(socketpath, gobject.IO_IN, devinput2lircd.eventhandler)  
        fcntl.ioctl(socketpath.fileno(), 0x40044590, 1) #exclusive access to input device - so keypresses do not disturb other programs
        gobject.MainLoop().run()

    

